#!/usr/bin/env janet

# Color constants
(def colors {:red "\e[31m" :green "\e[32m" :yellow "\e[33m" :blue "\e[34m" :magenta "\e[35m" :cyan "\e[36m" :white "\e[37m" :reset "\e[0m"})

(defn colored [color text]
  (string (get colors color "") text (get colors :reset "")))

(defn log [level message]
  (case level
    :info (print (colored :blue "[INFO]") " " message)
    :warn (print (colored :yellow "[WARN]") " " message)
    :error (print (colored :red "[ERROR]") " " message)
    :success (print (colored :green "[SUCCESS]") " " message)
    (print message)))

(defn run-command [cmd &opt dry-run]
  (if dry-run
    (do
      (log :info (string "Would run: " cmd))
      0)
    (do
      (log :info (string "Running: " cmd))
      (os/shell cmd))))

(defn show-help []
  (print (colored :cyan "mu") " - NixOS Configuration Manager\n")
  (print "Usage: mu <command> [profile] [options]\n")
  (print "Commands:")
  (print "  build <profile>     Build NixOS configuration for profile")
  (print "  switch <profile>    Switch to NixOS configuration for profile")
  (print "  home <profile>      Build/switch home-manager for profile")
  (print "  status              Show current system status")
  (print "  help                Show this help message")
  (print "\nProfiles: personal, work")
  (print "\nOptions:")
  (print "  --dry-run           Show what would be done without executing"))

(defn validate-profile [profile]
  (if (or (= profile "personal") (= profile "work"))
    true
    (do
      (log :error (string "Invalid profile: " profile ". Must be 'personal' or 'work'"))
      false)))

(defn has-flag? [args flag]
  (some |(= $ flag) args))

(defn parse-args [args]
  # Skip the first argument (script name)
  (def real-args (drop 1 args))
  (def dry-run (has-flag? real-args "--dry-run"))
  (def filtered-args (filter |(not= $ "--dry-run") real-args))
  
  (def command (get filtered-args 0))
  (def profile (get filtered-args 1))
  
  {:command command :profile profile :dry-run dry-run})

(defn main [& args]
  (def parsed (parse-args args))
  (def command (get parsed :command))
  (def profile (get parsed :profile))
  (def dry-run (get parsed :dry-run))
  
  (when (or (not command) (= command "help"))
    (show-help)
    (if (not command) (os/exit 1))
    (os/exit 0))
  
  (case command
    "build" 
    (do
      (unless (validate-profile profile) (os/exit 1))
      (def cmd (string "sudo nixos-rebuild build --flake .#" profile))
      (def result (run-command cmd dry-run))
      (if (= result 0)
        (log :success (string "Build completed for " profile " profile"))
        (log :error "Build failed")))
    
    "switch"
    (do
      (unless (validate-profile profile) (os/exit 1))
      (def cmd (string "sudo nixos-rebuild switch --flake .#" profile))
      (def result (run-command cmd dry-run))
      (if (= result 0)
        (log :success (string "Switched to " profile " profile"))
        (log :error "Switch failed")))
    
    "home"
    (do
      (unless (validate-profile profile) (os/exit 1))
      (def cmd (string "home-manager switch --flake .#" profile))
      (def result (run-command cmd dry-run))
      (if (= result 0)
        (log :success (string "Home-manager updated for " profile " profile"))
        (log :error "Home-manager update failed")))
    
    "status"
    (do
      (log :info "Current system status:")
      (run-command "nixos-version" dry-run)
      (run-command "home-manager generations | head -5" dry-run))
    
    # default
    (do
      (log :error (string "Unknown command: " command))
      (show-help)
      (os/exit 1))))

# Run main
(main ;(dyn :args))